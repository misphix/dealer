// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/dealer.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "dealer/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDealerInterface is a mock of DealerInterface interface.
type MockDealerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDealerInterfaceMockRecorder
}

// MockDealerInterfaceMockRecorder is the mock recorder for MockDealerInterface.
type MockDealerInterfaceMockRecorder struct {
	mock *MockDealerInterface
}

// NewMockDealerInterface creates a new mock instance.
func NewMockDealerInterface(ctrl *gomock.Controller) *MockDealerInterface {
	mock := &MockDealerInterface{ctrl: ctrl}
	mock.recorder = &MockDealerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDealerInterface) EXPECT() *MockDealerInterfaceMockRecorder {
	return m.recorder
}

// ProcessOrder mocks base method.
func (m *MockDealerInterface) ProcessOrder(arg0 context.Context, arg1 *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockDealerInterfaceMockRecorder) ProcessOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockDealerInterface)(nil).ProcessOrder), arg0, arg1)
}
