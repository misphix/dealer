// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order_book.go

// Package service is a generated GoMock package.
package service

import (
	models "dealer/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderBookInterface is a mock of OrderBookInterface interface.
type MockOrderBookInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderBookInterfaceMockRecorder
}

// MockOrderBookInterfaceMockRecorder is the mock recorder for MockOrderBookInterface.
type MockOrderBookInterfaceMockRecorder struct {
	mock *MockOrderBookInterface
}

// NewMockOrderBookInterface creates a new mock instance.
func NewMockOrderBookInterface(ctrl *gomock.Controller) *MockOrderBookInterface {
	mock := &MockOrderBookInterface{ctrl: ctrl}
	mock.recorder = &MockOrderBookInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderBookInterface) EXPECT() *MockOrderBookInterfaceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderBookInterface) AddOrder(arg0 *models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrder", arg0)
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderBookInterfaceMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderBookInterface)(nil).AddOrder), arg0)
}

// Dequeue mocks base method.
func (m *MockOrderBookInterface) Dequeue() *models.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(*models.Order)
	return ret0
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockOrderBookInterfaceMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockOrderBookInterface)(nil).Dequeue))
}

// Peek mocks base method.
func (m *MockOrderBookInterface) Peek() *models.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(*models.Order)
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockOrderBookInterfaceMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockOrderBookInterface)(nil).Peek))
}

// RemoveOrder mocks base method.
func (m *MockOrderBookInterface) RemoveOrder(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveOrder", arg0)
}

// RemoveOrder indicates an expected call of RemoveOrder.
func (mr *MockOrderBookInterfaceMockRecorder) RemoveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrder", reflect.TypeOf((*MockOrderBookInterface)(nil).RemoveOrder), arg0)
}
