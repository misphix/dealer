// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "dealer/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderProcessorInterface is a mock of OrderProcessorInterface interface.
type MockOrderProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProcessorInterfaceMockRecorder
}

// MockOrderProcessorInterfaceMockRecorder is the mock recorder for MockOrderProcessorInterface.
type MockOrderProcessorInterfaceMockRecorder struct {
	mock *MockOrderProcessorInterface
}

// NewMockOrderProcessorInterface creates a new mock instance.
func NewMockOrderProcessorInterface(ctrl *gomock.Controller) *MockOrderProcessorInterface {
	mock := &MockOrderProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockOrderProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProcessorInterface) EXPECT() *MockOrderProcessorInterfaceMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderProcessorInterface) CancelOrder(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderProcessorInterfaceMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderProcessorInterface)(nil).CancelOrder), arg0, arg1)
}

// NewOrder mocks base method.
func (m *MockOrderProcessorInterface) NewOrder(arg0 context.Context, arg1 *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewOrder indicates an expected call of NewOrder.
func (mr *MockOrderProcessorInterfaceMockRecorder) NewOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrder", reflect.TypeOf((*MockOrderProcessorInterface)(nil).NewOrder), arg0, arg1)
}
